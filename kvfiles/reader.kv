
#: import os os
#: import Window kivy.core.window.Window
#: import ObjectProperty kivy.properties.ObjectProperty
#: import ScrollEffect kivy.effects.scroll.ScrollEffect
#: import get_color_from_hex kivy.utils.get_color_from_hex
#: import Get_text localizator.Get_text
#: import MDDropdownMenu kivymd.uix.menu.MDDropdownMenu

#: import app_values app_values

#: set icon_size 40
#: set settings_padding 10

<PageTurnerButton@Button>:
    background_normal: ''
    background_color: (0,0,0,0)
    size: (icon_size, self.parent.height)
    text: ''
    icon: ""

    canvas:
        Color:
            rgba: (0, 0, 0, .05)
        Rectangle:
            pos: self.pos
            size: self.size
        
        Color: 
            rgba: (0,1,0,1) if not self.disabled else (220/255,220/255,220/255)
        
        Rectangle:
            size: [self.width, icon_size]
            source: self.icon
            pos: self.pos[0], self.center[1]


<Translation_widget@ScrollView>:
    text: "start"
    do_scroll_x: False
    do_scroll_y: True
    always_overscroll: False
    size_hint_y: None
    height: min(max(0.1 * Window.height, translation_result.height), 0.25 * Window.height)
    scroll_y: 1

    # both important in different cases: 1 works when text have same length
    # second: size changes
    on_text:
        self.scroll_y = 1
    on_height:
        self.scroll_y = 1 

    Label:
        text: self.parent.text
        color: app.theme_cls.text_color
        size_hint_y: None
        text_size: self.parent.width, None
        size: self.texture_size
        padding: 20, 0
        id: translation_result
        font_name: os.path.join(app.directory, 'assets', 'fonts', 'NotoSans-Regular.ttf')


<PagePresenter>:
    size_hint_y: 1
    size_hint_x: 1

    canvas.before:
        Color:
            rgba: (1,1,1,0.5) if app.theme_cls.theme_style == 'Light' else (0.4 ,0.4, 0.4, 0.5)
        Rectangle:
            size: self.size
            source: os.path.join(app.directory, 'assets', 'paper.jpg')
        Color:
            rgba: (0,0,0,1)

    PageTurnerButton:
        id: page_forward
        pos: (self.parent.size[0] - self.size[0], 0)
        icon: os.path.join(app.directory, 'assets', 'right.png')
        on_press: root.forward()
        disabled: root.cur_page == root.book.length

    PageTurnerButton:
        id: page_back
        disabled: root.cur_page == 1
        on_press: root.back()
        icon: os.path.join(app.directory, 'assets', 'left.png')
    
    Page:
        id: page
        size: self.parent.size
        page: root.cur_page


<SettingsItem@BoxLayout>:
    orientation: "horizontal"
    width: self.parent.width
    size_hint_y: None
    height: self.padding[1] + self.padding[3] + max(self.children, key = lambda x: x.height, default = Window).height
    padding: [50, settings_padding] * 2

    canvas:
        Color:
            rgba:
                (221/255, 238/255, 255/255, 0.3)
        Rectangle:
            size: self.size
            pos: self.pos


<Divider@Widget>:
    size_hint_y: None
    line_padding: 30
    line_color: (1,0,0,1)

    canvas:
        Color:
            rgba: self.line_color
        Line:
            width: 2
            points: (self.pos[0] + self.line_padding, self.pos[1] + self.height/2, self.pos[0] + self.width - self.line_padding, self.pos[1] + self.height/2)


<LibraryListItem>:
    width: self.parent.width if self.parent else 100

    on_press:
        #library_list
        self.parent.parent.choose_book(root.text)

    IconLeftWidget:
        icon: 'book'
        on_press:
            root.parent.parent.choose_book(root.text)
    
    IconRightWidget:
        icon: "delete"
        icon_color: [1,0,0,1]
        on_press:
            root.parent.parent.remove_book(root.text)
    

<PageScreen>:
    id: reader
    name: 'reader'

    ScreenManager:
        size: self.parent.size
        id: page_screen

        # main page with book was opened
        Screen:
            # self.parent produces error for some cases
            size: page_screen.size
            name: 'book'

            BoxLayout:
                orientation: 'vertical'
                size: self.parent.size
                spacing: 0

                MyAppBar:
                    id: pagePresenterAppBar
                    title: Get_text('info_reader')
                    right_action_items: [['dots-vertical', lambda x: self.open_menu(x)]]
                    left_action_items: [['menu', lambda x: app_menu.set_state('open')]]
                    page_turner: page_presenter

                PagePresenter:
                    id: page_presenter
                    height: self.parent.height - pagePresenterAppBar.height

        # page with list of books
        Screen:
            id: library
            size: page_screen.size
            name: 'library'

            BoxLayout:
                orientation: "vertical"
                size: self.parent.size

                MDTopAppBar:
                    title: Get_text('info_library')
                    id: library_app_bar
                    left_action_items: [['arrow-left', lambda x: root.close_library()]]

                LibraryPresenter:
                    id: library_list
                    width: library.width
                    height: self.parent.height - library_app_bar.height - library_space.height
                    size_hint_y: None
                    viewclass: "LibraryListItem"
                    
                    RecycleBoxLayout:
                        size_hint_y: None
                        height: self.minimum_height
                        width: self.parent.width
                        id: LibraryListLayout
                        orientation: 'vertical'
                Widget:
                    height: add_book_btn.height + 10
                    width: library.width
                    id: library_space

            MDFloatingActionButton:
                icon: "plus"
                id: add_book_btn
                md_bg_color: app.theme_cls.primary_color
                pos: [Window.width * 0.98 - self.width, 0.02 * Window.height]

                on_press:
                    print('add book')
                    library_list.prepare_choosing_file()

        # screen with settings
        Screen:
            id: settings
            name: "settings"
            size: page_screen.size

            BoxLayout:
                orientation: "vertical"
                size: self.parent.size

                MDTopAppBar:
                    title: Get_text('info_settings')
                    id: settings_app_bar
                    left_action_items: [['arrow-left', lambda x: root.close_settings()]]
                
                ScrollView:
                    do_scroll_x: False
                    do_scroll_y: (self.height <= mdlist.height)
                    size: [Window.width, Window.height - settings_app_bar.height]

                    MDList:
                        id: mdlist
                        height: self.minimum_height
                        width: self.parent.width
                        size_hint_y: None
                        size_hint_x: None
                        spacing: 10

                        SettingsItem:
                            MDLabel:
                                id: language_label
                                text: Get_text('info_language')

                            AnchorLayout:
                                anchor_y: 'center'
                                size_hint_x: None
                                width: language_drop_down_image.width
                                
                                MDDropDownItem:
                                    id: language_drop_down_image
                                    text: Get_text('lang_'+app_values.app_info.interface_language)
                                    
                                    on_press:
                                        def work(lang): menu.dismiss();language_drop_down_image.text = Get_text('lang_'+lang);app_values.app_info.set_language(lang);reader.change_language();
                                        def produse(lang): return {'text': Get_text('lang_'+lang), 'on_release': lambda x=None: work(lang),"viewclass": "MDFlatButton", "height": 76}
                                        
                                        menu_items = [ produse(lang) \
                                        for lang in app_values.app_info.supported_interface_languages
                                        ]

                                        menu = MDDropdownMenu( \
                                        caller = language_drop_down_image, \
                                        items=menu_items, \
                                        width_mult=3, \
                                        )
                                        menu.open()

                        SettingsItem:
                            MDLabel:
                                id: translator_chooser_label
                                text: Get_text('info_translater')

                            AnchorLayout:
                                anchor_y: 'center'
                                size_hint_x: None
                                width: translator_chooser.width

                                MDDropDownItem:
                                    id: translator_chooser
                                    text: app_values.app_info.translator.title()
                                    
                                    on_press:
                                        def work(translator): menu.dismiss();root.set_translator(translator);translator_chooser.text = translator.title()
                                        items = [ \
                                        { \
                                        'text': "Argos", \
                                        'on_release': lambda x=None: work('argos'), \
                                        "viewclass": "MDFlatButton", \
                                        "height": 76 \
                                        }, \
                                        { \
                                        'text': 'Google', \
                                        'on_release': lambda x=None: work('google'), \
                                        "viewclass": "MDFlatButton", \
                                        "height": 76 \
                                        } \
                                        ]
                                        menu = MDDropdownMenu(caller = translator_chooser, items=items, width_mult=3)
                                        menu.open()

                        SettingsItem:
                            MDLabel:
                                id: change_theme
                                text: Get_text('info_change_theme')

                            AnchorLayout:
                                anchor_y: 'center'
                                size_hint_x: None
                                width: theme_changer.width
                            
                                MDDropDownItem:
                                    id: theme_changer
                                    text: Get_text('theme_' + app.theme_cls.theme_style)
                                    on_press:
                                        def work(theme): menu.dismiss();app.set_theme(theme);theme_changer.text = Get_text('theme_'+theme)
                                        items = [ \
                                        { \
                                        'text': Get_text('theme_Light'), \
                                        'on_release': lambda x=None: work('Light'), \
                                        "viewclass": "MDFlatButton", \
                                        "height": 76 \
                                        }, \
                                        { \
                                        'text': Get_text('theme_Dark'), \
                                        'on_release': lambda x=None: work('Dark'), \
                                        "viewclass": "MDFlatButton", \
                                        "height": 76 \
                                        } \
                                        ]
                                        menu = MDDropdownMenu(caller = theme_changer, items=items, width_mult=3)
                                        menu.open()

                        SettingsItem:
                            MDLabel:
                                id: translation_text
                                text: Get_text('info_translate_text')

                            CheckBox:
                                size_hint_x: None
                                active: app_values.app_info.translate_text
                                on_active:
                                    app_values.app_info.set_translation(args[1])

                        SettingsItem:
                            MDLabel:
                                id: select_text
                                text: Get_text('info_select_text')
                        
                            CheckBox:
                                size_hint_x: None
                                active: app_values.app_info.select_text
                                on_active:
                                    app_values.app_info.set_selection(args[1])


    # right drawer
    MDNavigationDrawer:
        id: translater
        md_bg_color: get_color_from_hex("#f7f4e7") if app.theme_cls.theme_style == 'Light' else get_color_from_hex("#49423D")
        close_on_click: True
        swipe_distance: 30
        anchor: 'right'
        padding: [0,0,0,16]
        orientation: "vertical"

        on_state:
            root.check_translator()
            title = root.cur_translater.title()
            translators_tabs.switch_tab(title, 'title')

        MDNavigationDrawerHeader:
            id: translater_header
            title: Get_text('info_translater')
            title_color: (1,1,1,1)
            text_color: (1,1,1,1)
            text: ""
            spacing: "4dp"
            padding: "15dp", "10dp", "20dp", "62dp"

            canvas.before:
                Color:
                    rgba: app.theme_cls.primary_color
                RoundedRectangle:
                    pos: self.pos
                    size: (self.width, self.height + 16)
                    radius: (12,0,0,0)

        MDTabs:
            id: translators_tabs
            size_hint_y: None
            height: translater.height - translater_header.height

            on_tab_switch:
                root.set_menu_translater(args[1].page_id)

            Tab:
                page_id: 'argos'
                title: "Argos"

                GridLayout:
                    cols: 1
                    spacing: 10
                    width: translators_tabs.width
                    height: translators_tabs.height - translators_tabs.tab_bar_height
                    padding: [20, '10dp', 0, 0]

                    BoxLayout:
                        size_hint_y: None
                        orientation: "horizontal"
                        padding: "20dp","5dp"
                        height: max(translate_from.height, from_translater_selector.height)

                        Label:
                            id: translate_from
                            color: app.theme_cls.text_color
                            text: Get_text('info_translate_from')

                            size: self.texture_size
                            size_hint_x: None
                        
                        AnchorLayout:
                            anchor_y: 'center'
                            anchor_x: "left"
                            width: from_translater_selector.width

                            MDDropDownItem:
                                id: from_translater_selector
                                text: reader.from_lang
                                on_press:
                                    def work(lang): menu.dismiss();reader.from_lang=lang;reader.present(reader.word)
                                    def produse(lang): return {'text': lang, 'on_release': lambda x='ru': work(lang),"viewclass": "MDFlatButton", "height": 76}

                                    menu_items = [produse(lang) for lang in reader.supported_languages ]
                                    menu = MDDropdownMenu(caller = self, items=menu_items, width_mult=3)
                                    menu.open()            
                    Divider:
                        line_color: (0.4 ,0.4 ,0.4 ,0.4)

                    Translation_widget:
                        text: reader.word
                    
                    Divider:
                        line_color: (0.4 ,0.4 ,0.4 ,0.4)

                    BoxLayout:
                        size_hint_y: None
                        orientation: "horizontal"
                        padding: "20dp","5dp"
                        spacing: "5dp"
                        height: max(translate_to.height, to_translater_selector.height)

                        Label:
                            id: translate_to
                            text: Get_text('info_translate_to')
                            color: app.theme_cls.text_color

                            size: self.texture_size
                            size_hint_x: None


                        AnchorLayout:
                            anchor_y: 'center'
                            anchor_x: "left"
                            width: from_translater_selector.width

                            MDDropDownItem:
                                text: reader.to_lang
                                id: to_translater_selector
                                on_press:
                                    def work(lang): menu.dismiss();reader.to_lang=lang;reader.present(reader.word)
                                    def produse(lang): return {'text': lang, 'on_release': lambda x='ru': work(lang),"viewclass": "MDFlatButton", "height": 76}
                                    
                                    menu_items = [produse(lang) for lang in reader.supported_languages ]
                                    menu = MDDropdownMenu(caller = self, items=menu_items, width_mult=3)
                                    menu.open()
            
                    Divider:
                        line_color: (0.4 ,0.4 ,0.4 ,0.4)

                    Translation_widget:
                        text: reader.translation_result
                    
                    Divider:
                        line_color: (0.4 ,0.4 ,0.4 ,0.4)

                    MDLabel:
                        text: 'translated with Argos'
                        size_hint_y: None
                    
                    Widget:
                        size_hint_y: 1

            Tab:
                page_id: 'google'
                title: 'Google'

                GridLayout:
                    cols: 1
                    spacing: 10
                    width: translators_tabs.width
                    height: translators_tabs.height - translators_tabs.tab_bar_height
                    padding: [20, '10dp', 0, 0]

                    BoxLayout:
                        size_hint_y: None
                        orientation: "horizontal"
                        padding: "20dp","5dp"
                        height: max(google_translate_from.height, google_from_translater_selector.height)

                        Label:
                            id: google_translate_from
                            color: app.theme_cls.text_color
                            text: Get_text('info_translate_from')

                            size: self.texture_size
                            size_hint_x: None
                        
                        AnchorLayout:
                            anchor_y: 'center'
                            anchor_x: "left"
                            width: google_from_translater_selector.width

                            MDDropDownItem:
                                id: google_from_translater_selector
                                text: reader.google_from_lang
                                on_press:
                                    def work(lang): menu.dismiss();reader.google_from_lang=lang;reader.present(reader.word)
                                    def produse(lang): return {'text': lang, 'on_release': lambda x='ru': work(lang),"viewclass": "MDFlatButton", "height": 76}

                                    menu_items = [produse(lang) for lang in reader.google_supported_languages ]
                                    menu = MDDropdownMenu(caller = self, items=menu_items, width_mult=3)
                                    menu.open()            
                    Divider:
                        line_color: (0.4 ,0.4 ,0.4 ,0.4)

                    Translation_widget:
                        text: reader.word
                    
                    Divider:
                        line_color: (0.4 ,0.4 ,0.4 ,0.4)

                    BoxLayout:
                        size_hint_y: None
                        orientation: "horizontal"
                        padding: "20dp","5dp"
                        spacing: "5dp"
                        height: max(google_translate_to.height, google_to_translater_selector.height)

                        Label:
                            id: google_translate_to
                            text: Get_text('info_translate_to')
                            color: app.theme_cls.text_color

                            size: self.texture_size
                            size_hint_x: None


                        AnchorLayout:
                            anchor_y: 'center'
                            anchor_x: "left"
                            width: google_to_translater_selector.width

                            MDDropDownItem:
                                text: reader.google_to_lang
                                id: google_to_translater_selector
                                on_press:
                                    def work(lang): menu.dismiss();reader.google_to_lang=lang;reader.present(reader.word)
                                    def produse(lang): return {'text': lang, 'on_release': lambda x='ru': work(lang),"viewclass": "MDFlatButton", "height": 76}
                                    
                                    menu_items = [produse(lang) for lang in reader.google_supported_languages ]
                                    menu = MDDropdownMenu(caller = self, items=menu_items, width_mult=3)
                                    menu.open()
            
                    Divider:
                        line_color: (0.4 ,0.4 ,0.4 ,0.4)

                    Translation_widget:
                        text: reader.google_translation_result
                    
                    Divider:
                        line_color: (0.4 ,0.4 ,0.4 ,0.4)

                    MDLabel:
                        text: 'translated with Google'
                        size_hint_y: None
                    
                    Widget:
                        size_hint_y: 1
            

    # left drawer with menu 
    MDNavigationDrawer:
        id: app_menu
        md_bg_color: get_color_from_hex("#f7f4e7") if app.theme_cls.theme_style == 'Light' else get_color_from_hex("#49423D")
        close_on_click: True
        anchor: 'left'
        padding: [0,0,0,16]

        MDNavigationDrawerMenu:
            do_scroll_y: False

            MDNavigationDrawerHeader:
                id: menu_header
                padding: "12dp", "10dp", 0, "56dp"
                title: Get_text('info_reader')
                title_color: (1,1,1,1)
                text_color: (1,1,1,1)

                canvas.before:
                    Color:
                        rgba: app.theme_cls.primary_color
                    RoundedRectangle:
                        pos: self.pos
                        size: (self.width, self.height + 16)
                        radius: (0,12,0,0)                

            MDNavigationDrawerItem:
                id: menu_select_book
                text: Get_text('info_select_book')
                text_color: app.theme_cls.text_color
                selected_color: app.theme_cls.text_color
                selected: False
                focus_behavior: False
                icon_color: get_color_from_hex('#696e79')
                icon: os.path.join(app.directory, 'assets', 'book.png')

                on_press:
                    app_menu.set_state('close')
                    library_list.update_library()
                    page_screen.current = 'library'

            MDNavigationDrawerItem:
                id: menu_settings
                text: Get_text('info_settings')
                icon: os.path.join(app.directory, 'assets', 'setting.png')
                icon_color: app.theme_cls.text_color
                text_color: app.theme_cls.text_color
                selected_color: app.theme_cls.text_color
                focus_behavior: False

                on_press:
                    app_menu.set_state('close')
                    page_screen.current = 'settings'



