

#: import os os
#: import Window kivy.core.window.Window
#: import ObjectProperty kivy.properties.ObjectProperty
#: import ScrollEffect kivy.effects.scroll.ScrollEffect
#: import get_color_from_hex kivy.utils.get_color_from_hex
#: import Get_text localizator.Get_text
#: import MDDropdownMenu kivymd.uix.menu.MDDropdownMenu

#: import app_values app_values

#: set icon_size 40


<PageTurnerButton@Button>:
    background_normal: ''
    background_color: (0,0,0,0)
    size: (icon_size, 60)
    text: ''
    icon: ""

    canvas:
        Color: 
            rgba: (0,1,0,1) if not self.disabled else (220/255,220/255,220/255)
        Rectangle:
            size: self.size
            source: self.icon
            pos: self.pos


<Translation_widget@ScrollView>:
    text: "start"
    do_scroll_x: False
    do_scroll_y: True
    always_overscroll: False
    size_hint_y: None
    height: min(max(0.1 * Window.height, translation_result.height), 0.25 * Window.height)
    scroll_y: 1

    # both important in different cases: 1 works when text have same length
    # second: size changes
    on_text:
        self.scroll_y = 1
    on_height:
        self.scroll_y = 1 

    Label:
        text: self.parent.text
        color: (0,0,0,1)
        size_hint_y: None
        text_size: self.parent.width, None
        size: self.texture_size
        padding: 20, 0
        id: translation_result


<PagePresenter>:
    size_hint_y: 1
    size_hint_x: 1

    on_parent:
        root.init_page()

    canvas.before:
        Color:
            rgba: (1,1,1,0.5)
        Rectangle:
            size: self.size
            source: os.path.join(app.directory, 'assets', 'paper.jpg')

    PageTurnerButton:
        id: page_forward
        pos: (self.parent.size[0] - self.size[0], self.parent.size[1]/2)
        icon: os.path.join(app.directory, 'assets', 'right.png')
        on_press: root.forward()
        disabled: root.cur_page == root.book.length

    PageTurnerButton:
        id: page_back
        pos: (0, self.parent.size[1]/2)
        disabled: root.cur_page == 1
        on_press: root.back()
        icon: os.path.join(app.directory, 'assets', 'left.png')


<PageScreen>:
    id: reader
    name: 'reader'

    ScreenManager:
        size: self.parent.size
        id: page_screen

        # main page with book
        Screen:
            size: page_screen.size
            name: 'book'

            BoxLayout:
                orientation: 'vertical'
                size: self.parent.size

                MyAppBar:
                    id: pagePresenterAppBar
                    title: Get_text('info_reader')
                    right_action_items: [['dots-vertical', lambda x: self.open_menu(x)]]
                    left_action_items: [['menu', lambda x: app_menu.set_state('open')]]
                    page_turner: page_presenter

                PagePresenter:
                    id: page_presenter
        
        # page with list of books
        Screen:
            id: library
            size: page_screen.size
            name: 'library'

            BoxLayout:
                orientation: "vertical"
                size: self.parent.size

                MDTopAppBar:
                    title: Get_text('info_library')
                    id: library_app_bar
                    left_action_items: [['arrow-left', lambda x: root.close_library()]]
                
                ScrollView:
                    do_scroll_x: False
                    do_scroll_y: True
                    id: library_scroll
                    width: self.parent.width
                    height: self.parent.height - library_app_bar.height

                    LibraryPresenter:
                        id: library_list
                        on_parent:
                            self.update_library()

            MDFloatingActionButton:
                icon: "plus"
                md_bg_color: app.theme_cls.primary_color
                pos: [Window.width * 0.98 - self.width, 0.02 * Window.height]

                on_press:
                    print('add book')
                    library_list.prepare_choosing_file()

        # screen with settings
        Screen:
            id: settings
            name: "settings"
            size: page_screen.size

            BoxLayout:
                orientation: "vertical"
                size: self.parent.size

                MDTopAppBar:
                    title: Get_text('info_settings')
                    id: settings_app_bar
                    left_action_items: [['arrow-left', lambda x: root.close_settings()]]
                
                ScrollView:
                    do_scroll_x: False
                    do_scroll_y: False
                    size: [Window.width, Window.height - settings_app_bar.height]

                    MDList:
                        padding: [50, 50]
                        spacing: 10

                        Widget:
                            size_hint_y: None
                            height: 15

                        BoxLayout:
                            orientation: "horizontal"

                            MDLabel:
                                id: language_label
                                text: Get_text('info_language')
                                
                            MDDropDownItem:
                                id: language_drop_down_image
                                text: Get_text('lang_'+app_values.app_info.interface_language)
                                size_hint_x: None
                                
                                on_press:
                                    def work(lang): menu.dismiss();language_drop_down_image.text = Get_text('lang_'+lang);app_values.app_info.set_language(lang);reader.change_language();
                                    def produse(lang): return {'text': Get_text('lang_'+lang), 'on_release': lambda x=None: work(lang),"viewclass": "MDFlatButton", "height": 76}
                                    
                                    menu_items = [ produse(lang) \
                                    for lang in app_values.app_info.supported_interface_languages
                                    ]

                                    menu = MDDropdownMenu( \
                                    caller = language_drop_down_image, \
                                    items=menu_items, \
                                    width_mult=3, \
                                    )
                                    menu.open()

    # right drawer
    MDNavigationDrawer:
        id: translater
        md_bg_color: get_color_from_hex("#f7f4e7")
        close_on_click: True
        swipe_distance: 30
        anchor: 'right'
        padding: [0,0,0,16]

        MDNavigationDrawerMenu:      
            do_scroll_y: False    

            MDNavigationDrawerHeader:
                id: translater_header
                title: Get_text('info_translater')
                title_color: get_color_from_hex("#4a4939")
                text: ""
                # spacing: "4dp"
                padding: "15dp", 0, 0, "62dp"

                canvas.before:
                    Color:
                        rgba: get_color_from_hex("#3cbee6")
                    Rectangle:
                        size: self.size
                        pos: self.pos

            BoxLayout:
                size_hint_y: None
                orientation: "horizontal"
                padding: "20dp","5dp"
                height: max(translate_from.height, from_translater_selector.height)

                Label:
                    id: translate_from
                    color: (0,0,0,1)
                    text: Get_text('info_translate_from')

                    size: self.texture_size
                    size_hint_x: None
                
                MDDropDownItem:
                    id: from_translater_selector
                    text: reader.from_lang
                    on_press:
                        def work(lang): menu.dismiss();reader.from_lang=lang;reader.present(reader.word)
                        def produse(lang): return {'text': lang, 'on_release': lambda x='ru': work(lang),"viewclass": "MDFlatButton", "height": 76}
                        
                        menu_items = [produse(lang) for lang in reader.supported_languages ]

                        menu = MDDropdownMenu( \
                        caller = self, \
                        items=menu_items, \
                        width_mult=3, \
                        )
                        menu.open()
            
            MDNavigationDrawerDivider:
            Translation_widget:
                text: reader.word

            MDNavigationDrawerDivider:
            
            BoxLayout:
                size_hint_y: None
                size_hint_x: None
                orientation: "horizontal"
                padding: "20dp","5dp"
                spacing: "5dp"
                height: max(translate_to.height, to_translater_selector.height)

                Label:
                    id: translate_to
                    text: Get_text('info_translate_to')
                    color: (0,0,0,1)

                    size: self.texture_size
                    size_hint_x: None
                
                MDDropDownItem:
                    text: reader.to_lang
                    id: to_translater_selector
                    on_press:
                        def work(lang): menu.dismiss();reader.to_lang=lang;reader.present(reader.word)
                        def produse(lang): return {'text': lang, 'on_release': lambda x='ru': work(lang),"viewclass": "MDFlatButton", "height": 76}
                        
                        menu_items = [produse(lang) for lang in reader.supported_languages ]

                        menu = MDDropdownMenu( \
                        caller = self, \
                        items=menu_items, \
                        width_mult=3, \
                        )
                        menu.open()
            
            MDNavigationDrawerDivider:
            Translation_widget:
                text: reader.translation_result
            
            MDNavigationDrawerDivider:
            MDNavigationDrawerLabel:
                text: 'translated with Argos'

    # left drawer with menu 
    MDNavigationDrawer:
        id: app_menu
        md_bg_color: get_color_from_hex("#f7f4e7")
        close_on_click: True
        anchor: 'left'
        padding: [0,0,0,16]

        MDNavigationDrawerMenu:
            do_scroll_y: False

            MDNavigationDrawerHeader:
                id: menu_header
                title: Get_text('info_reader')
            
            MDNavigationDrawerItem:
                id: menu_select_book
                text: Get_text('info_select_book')

                on_press:
                    app_menu.set_state('close')
                    library_list.update_library()
                    page_screen.current = 'library'
        
            MDNavigationDrawerItem:
                id: menu_settings
                text: Get_text('info_settings')

                on_press:
                    app_menu.set_state('close')
                    page_screen.current = 'settings'



